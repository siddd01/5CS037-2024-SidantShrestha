# -*- coding: utf-8 -*-
"""Sidant_Shrestha_week1_ws_2408637

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e6h4d9XCWb_N-z5iU2gpZdsoEjbIxbYe
"""

import numpy as np
a=np.empty((2,2))
print(a)

import numpy as np
a=np.ones((4,2))
print(a)

import numpy as np
a=np.full((4,2),6)
print(a)



import numpy as np
a=np.array([[2,3],[4,1]])
b=np.zeros((3,2))

print(b)

import numpy as np
a=np.array([[2,3],[4,1]])
b=np.zeros_like(a)

print(b)

import numpy as np
a=np.array([[2,3],[4,1]])
b=np.ones_like(a)

print(b)

new_list = [1,2,3,4]
a=np.array(new_list)
print(a)

#problem 2
#Create an array with values ranging from 10 to 49. {Hint:np.arrange()}.
import numpy as np
a=np.arange(10,49)
print(a)

#Create a 3X3 matrix with values ranging from 0 to 8.
import numpy as np
a=np.arange(9).reshape(3,3)
print(a)

#Create a 3X3 identity matrix.{Hint:np.eye()}
import numpy as np
a=np.eye(3)
print(a)

#4. Create a random array of size 30 and find the mean of the array.

import numpy as np
a=np.random.random(30)
mean =a.mean()
print(mean)

import numpy as np
a=np.random.random((10,10))
print(a.min())

print(a.max())

import numpy as np
a=np.zeros(10)
a[4]=1
print(a)

import numpy as np
arr=[1,2,0,0,4,0]
print(arr[::-1])

import numpy as np

size = 5
array = np.zeros((size, size))
array[0, :] = 1
array[-1, :] = 1
array[:, 0] = 1
array[:, -1] = 1

print(array)

#Create a 8X8 matrix and fill it with a checkerboard pattern.
import numpy as np

checkerboard_matrix = np.zeros((8, 8))
checkerboard_matrix[::2, ::2] = 1
checkerboard_matrix[1::2, 1::2] = 1

print(checkerboard_matrix)

import numpy as np

x = np.array([[1,2],[3,5]])
y = np.array([[5,6],[7,8]])
v = np.array([9,10])
w = np.array([11,12])
add =x+y
sub=x-y
mul =x *2
dot1=np.dot(x,y)
dor2=np.dot(v,w)
c1=np.concatenate((x,y),axis=0)
c2=np.concatenate((v,w),axis=0)
 #x and v cannot be concatenate because their shapes are not compatible for that operation



print(c1)
print(c2)

print(dot1)
print(dor2)
sq=np.sqrt(x)
print(sq)
print(mul)
print(add)
print(sub)

import numpy as np

# Given matrices
A = np.array([[3, 4], [7, 8]])
B = np.array([[5, 3], [2, 1]])


A_inv = np.linalg.inv(A)
I = np.dot(A, A_inv)
identity_check = np.allclose(I, np.eye(2))

print(I)
print( identity_check)


AB = np.dot(A, B)
BA = np.dot(B, A)
equal_check = np.array_equal(AB, BA)

print( AB)
print( BA)
print( equal_check)


AB_T = np.transpose(AB)
B_T = np.transpose(B)
A_T = np.transpose(A)
BT_AT = np.dot(B_T, A_T)
transpose_check = np.allclose(AB_T, BT_AT)

print( AB_T)
print( BT_AT)
print( transpose_check)

import numpy as np


A = np.array([
    [2, -3, 1],
    [1, -1, 2],
    [3, 1, -1]
])

B = np.array([-1, -3, 9])


A_inv = np.linalg.inv(A)

X = np.dot(A_inv, B)


print( X)